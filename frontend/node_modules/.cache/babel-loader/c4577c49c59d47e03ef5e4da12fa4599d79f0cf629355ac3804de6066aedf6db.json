{"ast":null,"code":"/**\n * Fetches trade data from the API\n * @returns Promise resolving to an array of trades\n */\nexport const fetchTrades = async () => {\n  const response = await fetch('/api/trades');\n  if (!response.ok) {\n    throw new Error(`Failed to fetch trades: ${response.status} ${response.statusText}`);\n  }\n  return await response.json();\n};\n\n/**\n * Subscribes to real-time trade updates via WebSocket\n * @param callback Function to call when a new trade is received\n * @returns Function to unsubscribe from updates\n */\nexport const subscribeToUpdates = callback => {\n  // Create WebSocket connection\n  const ws = new WebSocket('ws://localhost:8000/ws/trades');\n\n  // Handle incoming messages\n  ws.addEventListener('message', event => {\n    try {\n      const trade = JSON.parse(event.data);\n      callback(trade);\n    } catch (error) {\n      console.error('Error parsing WebSocket message:', error);\n    }\n  });\n\n  // Handle errors\n  ws.addEventListener('error', error => {\n    console.error('WebSocket error:', error);\n  });\n\n  // Return unsubscribe function\n  return () => {\n    ws.close();\n  };\n};\n\n/**\n * Transforms trade data into a format suitable for Chart.js\n * @param trades Array of trades to transform\n * @returns ChartData object for use with Chart.js\n */\nexport const transformTradesForChart = trades => {\n  // Extract unique timestamps and sort them\n  const timestamps = [...new Set(trades.map(trade => trade.timestamp))].sort();\n\n  // Extract unique symbols\n  const symbols = [...new Set(trades.map(trade => trade.symbol))];\n\n  // Generate random colors for each symbol\n  const colors = symbols.map(() => {\n    const r = Math.floor(Math.random() * 200);\n    const g = Math.floor(Math.random() * 200);\n    const b = Math.floor(Math.random() * 200);\n    return `rgb(${r}, ${g}, ${b})`;\n  });\n\n  // Create datasets for each symbol\n  const datasets = symbols.map((symbol, index) => {\n    // Filter trades for this symbol\n    const symbolTrades = trades.filter(trade => trade.symbol === symbol);\n\n    // Create data points for each timestamp\n    const data = timestamps.map(timestamp => {\n      const trade = symbolTrades.find(t => t.timestamp === timestamp);\n      return trade ? trade.price : null;\n    });\n    return {\n      label: symbol,\n      data,\n      borderColor: colors[index],\n      backgroundColor: `${colors[index].replace('rgb', 'rgba').replace(')', ', 0.1)')}`,\n      borderWidth: 2,\n      pointBackgroundColor: colors[index],\n      pointRadius: 3,\n      fill: false,\n      tension: 0.1\n    };\n  });\n  return {\n    labels: timestamps,\n    datasets\n  };\n};","map":{"version":3,"names":["fetchTrades","response","fetch","ok","Error","status","statusText","json","subscribeToUpdates","callback","ws","WebSocket","addEventListener","event","trade","JSON","parse","data","error","console","close","transformTradesForChart","trades","timestamps","Set","map","timestamp","sort","symbols","symbol","colors","r","Math","floor","random","g","b","datasets","index","symbolTrades","filter","find","t","price","label","borderColor","backgroundColor","replace","borderWidth","pointBackgroundColor","pointRadius","fill","tension","labels"],"sources":["/Users/vaceslav/Documents/Trading_Bot/frontend/src/api/trading.ts"],"sourcesContent":["import { Trade } from '../types';\nimport { ChartData } from 'chart.js';\n\n/**\n * Fetches trade data from the API\n * @returns Promise resolving to an array of trades\n */\nexport const fetchTrades = async (): Promise<Trade[]> => {\n  const response = await fetch('/api/trades');\n  \n  if (!response.ok) {\n    throw new Error(`Failed to fetch trades: ${response.status} ${response.statusText}`);\n  }\n  \n  return await response.json();\n};\n\n/**\n * Subscribes to real-time trade updates via WebSocket\n * @param callback Function to call when a new trade is received\n * @returns Function to unsubscribe from updates\n */\nexport const subscribeToUpdates = (callback: (trade: Trade) => void): () => void => {\n  // Create WebSocket connection\n  const ws = new WebSocket('ws://localhost:8000/ws/trades');\n  \n  // Handle incoming messages\n  ws.addEventListener('message', (event) => {\n    try {\n      const trade = JSON.parse(event.data);\n      callback(trade);\n    } catch (error) {\n      console.error('Error parsing WebSocket message:', error);\n    }\n  });\n  \n  // Handle errors\n  ws.addEventListener('error', (error) => {\n    console.error('WebSocket error:', error);\n  });\n  \n  // Return unsubscribe function\n  return () => {\n    ws.close();\n  };\n};\n\n/**\n * Transforms trade data into a format suitable for Chart.js\n * @param trades Array of trades to transform\n * @returns ChartData object for use with Chart.js\n */\nexport const transformTradesForChart = (trades: Trade[]): ChartData => {\n  // Extract unique timestamps and sort them\n  const timestamps = [...new Set(trades.map(trade => trade.timestamp))].sort();\n  \n  // Extract unique symbols\n  const symbols = [...new Set(trades.map(trade => trade.symbol))];\n  \n  // Generate random colors for each symbol\n  const colors = symbols.map(() => {\n    const r = Math.floor(Math.random() * 200);\n    const g = Math.floor(Math.random() * 200);\n    const b = Math.floor(Math.random() * 200);\n    return `rgb(${r}, ${g}, ${b})`;\n  });\n  \n  // Create datasets for each symbol\n  const datasets = symbols.map((symbol, index) => {\n    // Filter trades for this symbol\n    const symbolTrades = trades.filter(trade => trade.symbol === symbol);\n    \n    // Create data points for each timestamp\n    const data = timestamps.map(timestamp => {\n      const trade = symbolTrades.find(t => t.timestamp === timestamp);\n      return trade ? trade.price : null;\n    });\n    \n    return {\n      label: symbol,\n      data,\n      borderColor: colors[index],\n      backgroundColor: `${colors[index].replace('rgb', 'rgba').replace(')', ', 0.1)')}`,\n      borderWidth: 2,\n      pointBackgroundColor: colors[index],\n      pointRadius: 3,\n      fill: false,\n      tension: 0.1\n    };\n  });\n  \n  return {\n    labels: timestamps,\n    datasets\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
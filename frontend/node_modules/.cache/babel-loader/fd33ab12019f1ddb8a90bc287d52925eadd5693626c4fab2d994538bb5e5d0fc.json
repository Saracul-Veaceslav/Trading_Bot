{"ast":null,"code":"var _jsxFileName = \"/Users/vaceslav/Documents/Trading_Bot/frontend/src/pages/Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { TradingChart } from '../components/TradingChart';\nimport { TradeList } from '../components/TradeList';\nimport { fetchTrades, subscribeToUpdates, transformTradesForChart } from '../api/trading';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Dashboard = () => {\n  _s();\n  const [trades, setTrades] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const data = await fetchTrades();\n        setTrades(data);\n      } catch (err) {\n        console.error('Failed to fetch trades:', err);\n        setError('Failed to load trade data. Please try again later.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadData();\n\n    // Subscribe to real-time updates\n    const unsubscribe = subscribeToUpdates(update => {\n      setTrades(current => {\n        // Check if this trade already exists (by ID)\n        const exists = current.some(trade => trade.id === update.id);\n        if (exists) {\n          // Replace the existing trade\n          return current.map(trade => trade.id === update.id ? update : trade);\n        } else {\n          // Add the new trade\n          return [...current, update];\n        }\n      });\n    });\n\n    // Cleanup function to unsubscribe when component unmounts\n    return () => unsubscribe();\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"dashboard-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Trading Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-controls\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"refresh-button\",\n          onClick: async () => {\n            setIsLoading(true);\n            try {\n              const data = await fetchTrades();\n              setTrades(data);\n              setError(null);\n            } catch (err) {\n              console.error('Failed to refresh trades:', err);\n              setError('Failed to refresh trade data.');\n            } finally {\n              setIsLoading(false);\n            }\n          },\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"chart-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Price Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: /*#__PURE__*/_jsxDEV(TradingChart, {\n            data: transformTradesForChart(trades)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"trades-section\",\n        children: /*#__PURE__*/_jsxDEV(TradeList, {\n          trades: trades\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"nPWGwteCWGT4IbbEcgeQpF1wooA=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","TradingChart","TradeList","fetchTrades","subscribeToUpdates","transformTradesForChart","jsxDEV","_jsxDEV","Dashboard","_s","trades","setTrades","isLoading","setIsLoading","error","setError","loadData","data","err","console","unsubscribe","update","current","exists","some","trade","id","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","location","reload","_c","$RefreshReg$"],"sources":["/Users/vaceslav/Documents/Trading_Bot/frontend/src/pages/Dashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { TradingChart } from '../components/TradingChart';\nimport { TradeList } from '../components/TradeList';\nimport { fetchTrades, subscribeToUpdates, transformTradesForChart } from '../api/trading';\nimport { Trade } from '../types';\nimport './Dashboard.css';\n\nexport const Dashboard: React.FC = () => {\n  const [trades, setTrades] = useState<Trade[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n        const data = await fetchTrades();\n        setTrades(data);\n      } catch (err) {\n        console.error('Failed to fetch trades:', err);\n        setError('Failed to load trade data. Please try again later.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    loadData();\n    \n    // Subscribe to real-time updates\n    const unsubscribe = subscribeToUpdates((update) => {\n      setTrades(current => {\n        // Check if this trade already exists (by ID)\n        const exists = current.some(trade => trade.id === update.id);\n        if (exists) {\n          // Replace the existing trade\n          return current.map(trade => \n            trade.id === update.id ? update : trade\n          );\n        } else {\n          // Add the new trade\n          return [...current, update];\n        }\n      });\n    });\n    \n    // Cleanup function to unsubscribe when component unmounts\n    return () => unsubscribe();\n  }, []);\n  \n  if (isLoading) {\n    return (\n      <div className=\"dashboard-loading\">\n        <div className=\"spinner\"></div>\n        <p>Loading...</p>\n      </div>\n    );\n  }\n  \n  if (error) {\n    return (\n      <div className=\"dashboard-error\">\n        <h2>Error</h2>\n        <p>{error}</p>\n        <button onClick={() => window.location.reload()}>Retry</button>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"dashboard\">\n      <header className=\"dashboard-header\">\n        <h1>Trading Dashboard</h1>\n        <div className=\"dashboard-controls\">\n          <button className=\"refresh-button\" onClick={async () => {\n            setIsLoading(true);\n            try {\n              const data = await fetchTrades();\n              setTrades(data);\n              setError(null);\n            } catch (err) {\n              console.error('Failed to refresh trades:', err);\n              setError('Failed to refresh trade data.');\n            } finally {\n              setIsLoading(false);\n            }\n          }}>\n            Refresh\n          </button>\n        </div>\n      </header>\n      \n      <div className=\"dashboard-content\">\n        <section className=\"chart-section\">\n          <h2>Price Chart</h2>\n          <div className=\"chart-container\">\n            <TradingChart \n              data={transformTradesForChart(trades)}\n            />\n          </div>\n        </section>\n        \n        <section className=\"trades-section\">\n          <TradeList trades={trades} />\n        </section>\n      </div>\n    </div>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}